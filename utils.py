import networkx as nx
import matplotlib.pyplot as plt

# Список обласних центрів України
cities = [
    "Київ", "Львів", "Харків", "Одеса", "Дніпро", "Донецьк", "Запоріжжя", "Вінниця",
    "Полтава", "Чернігів", "Черкаси", "Миколаїв", "Луцьк", "Ужгород", "Івано-Франківськ",
    "Тернопіль", "Рівне", "Хмельницький", "Житомир", "Суми", "Херсон", "Кропивницький", "Чернівці"
]

# Створення графа
G = nx.Graph()

# Додавання вершин (обласні центри)
G.add_nodes_from(cities)

# Додавання ребер (дороги між деякими обласними центрами)
edges = [
    ("Київ", "Чернігів"), ("Київ", "Житомир"), ("Київ", "Черкаси"), ("Київ", "Полтава"),
    ("Львів", "Тернопіль"), ("Львів", "Луцьк"), ("Львів", "Івано-Франківськ"), ("Львів", "Ужгород"),
    ("Харків", "Полтава"), ("Харків", "Донецьк"), ("Харків", "Суми"),
    ("Одеса", "Миколаїв"), ("Одеса", "Вінниця"), ("Одеса", "Херсон"),
    ("Дніпро", "Запоріжжя"), ("Дніпро", "Полтава"), ("Дніпро", "Кропивницький"),
    ("Запоріжжя", "Херсон"), ("Запоріжжя", "Донецьк"),
    ("Вінниця", "Житомир"), ("Вінниця", "Хмельницький"), ("Вінниця", "Чернівці"),
    ("Черкаси", "Кропивницький"), ("Хмельницький", "Тернопіль"), ("Хмельницький", "Рівне"),
    ("Житомир", "Рівне"), ("Чернівці", "Івано-Франківськ"), ("Чернівці", "Хмельницький"), ("Чернівці", "Тернопіль")
]
G.add_edges_from(edges)

def dfs_path(graph:nx.Graph, start, goal):
    """Пошук шляху за допомогою DFS."""
    stack = [(start, [start])]
    while stack:
        (vertex, path) = stack.pop()
        for next_vertex in set(graph.neighbors(vertex)) - set(path):
            if next_vertex == goal:
                return path + [next_vertex]
            else:
                stack.append((next_vertex, path + [next_vertex]))
    return None

def bfs_path(graph:nx.Graph, start, goal):
    """Пошук шляху за допомогою BFS."""
    queue = [(start, [start])]
    while queue:
        (vertex, path) = queue.pop(0)
        for next_vertex in set(graph.neighbors(vertex)) - set(path):
            if next_vertex == goal:
                return path + [next_vertex]
            else:
                queue.append((next_vertex, path + [next_vertex]))
    return None