import networkx as nx
from utils import cities

weighted_edges = [
    ("Київ", "Чернігів", 130), ("Київ", "Житомир", 140), ("Київ", "Черкаси", 190), ("Київ", "Полтава", 340),
    ("Львів", "Тернопіль", 130), ("Львів", "Луцьк", 150), ("Львів", "Івано-Франківськ", 130), ("Львів", "Ужгород", 250),
    ("Харків", "Полтава", 150), ("Харків", "Донецьк", 300), ("Харків", "Суми", 180),
    ("Одеса", "Миколаїв", 130), ("Одеса", "Вінниця", 430), ("Одеса", "Херсон", 200),
    ("Дніпро", "Запоріжжя", 80), ("Дніпро", "Полтава", 200), ("Дніпро", "Кропивницький", 250),
    ("Запоріжжя", "Херсон", 200), ("Запоріжжя", "Донецьк", 220),
    ("Вінниця", "Житомир", 120), ("Вінниця", "Хмельницький", 120), ("Вінниця", "Чернівці", 370),
    ("Черкаси", "Кропивницький", 130), ("Хмельницький", "Тернопіль", 110), ("Хмельницький", "Рівне", 150),
    ("Житомир", "Рівне", 180), ("Чернівці", "Івано-Франківськ", 70), ("Чернівці", "Хмельницький", 170)
]

# Створення графа та додавання ваг до ребер (як у попередніх завданнях)
G = nx.Graph()
G.add_nodes_from(cities)  # Додавання обласних центрів як вершин
G.add_weighted_edges_from(weighted_edges)  # Додавання ребер з вагами

# Виконання алгоритму Дейкстри для знаходження найкоротшого шляху між усіма парами вершин
shortest_paths = dict(nx.all_pairs_dijkstra_path_length(G))

# Наприклад, відображення найкоротших шляхів від Києва до інших міст
shortest_paths_from_kyiv = shortest_paths["Київ"]

print(shortest_paths_from_kyiv)
